import React, { useState } from 'react';
import { AlertCircle, CheckCircle, Clock, GitBranch, Network, Settings, History, Search, Play, RotateCcw } from 'lucide-react';

const NXOSAutomationPortal = () => {
  const [activeTab, setActiveTab] = useState('configure');
  const [device, setDevice] = useState('spine-01');
  const [port, setPort] = useState('Ethernet1/1');
  const [vlan, setVlan] = useState('');
  const [description, setDescription] = useState('');
  const [checkResults, setCheckResults] = useState(null);
  const [isChecking, setIsChecking] = useState(false);
  const [isApplying, setIsApplying] = useState(false);
  const [configHistory, setConfigHistory] = useState([
    { id: 1, commit: 'a3f2d1b', timestamp: '2025-10-16 14:30', user: 'admin', action: 'Configure Eth1/5 - VLAN 100', status: 'success' },
    { id: 2, commit: 'b7e4c2a', timestamp: '2025-10-16 13:15', user: 'netops', action: 'Configure Eth1/3 - VLAN 200', status: 'success' },
    { id: 3, commit: 'c9d5e3f', timestamp: '2025-10-16 12:00', user: 'admin', action: 'Configure Eth1/10 - VLAN 150', status: 'rolled_back' }
  ]);

  const devices = ['spine-01', 'spine-02', 'leaf-01', 'leaf-02', 'leaf-03'];

  const simulatePreCheck = () => {
    setIsChecking(true);
    setTimeout(() => {
      setCheckResults({
        portExists: true,
        adminStatus: 'up',
        operStatus: 'down',
        currentConfig: {
          description: 'Uplink to Core',
          vlan: '10',
          mode: 'access'
        },
        macAddresses: [],
        recommendations: [
          'Port is administratively up but operationally down',
          'No MAC addresses learned - safe to reconfigure',
          'Current VLAN: 10 will be changed to ' + (vlan || 'N/A')
        ]
      });
      setIsChecking(false);
    }, 2000);
  };

  const simulateApplyConfig = () => {
    setIsApplying(true);
    setTimeout(() => {
      const newEntry = {
        id: configHistory.length + 1,
        commit: Math.random().toString(36).substr(2, 7),
        timestamp: new Date().toLocaleString(),
        user: 'admin',
        action: `Configure ${port} - VLAN ${vlan}`,
        status: 'success'
      };
      setConfigHistory([newEntry, ...configHistory]);
      setIsApplying(false);
      setCheckResults(null);
      alert('Configuration applied successfully and committed to Git!');
    }, 3000);
  };

  const handleRollback = (commit) => {
    if (confirm(`Rollback to commit ${commit}?`)) {
      alert(`Rolling back to commit ${commit}...`);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-2">
            <Network className="w-10 h-10 text-blue-400" />
            <h1 className="text-4xl font-bold">NX-OS VXLAN EVPN Automation</h1>
          </div>
          <p className="text-blue-200 text-lg">GitOps-based Network Configuration Portal</p>
        </div>

        {/* Navigation Tabs */}
        <div className="flex gap-2 mb-6 border-b border-blue-700">
          <button
            onClick={() => setActiveTab('configure')}
            className={`px-6 py-3 font-semibold transition-colors flex items-center gap-2 ${
              activeTab === 'configure'
                ? 'bg-blue-600 text-white border-b-2 border-blue-400'
                : 'text-blue-300 hover:text-white hover:bg-blue-800/30'
            }`}
          >
            <Settings className="w-5 h-5" />
            Configure Port
          </button>
          <button
            onClick={() => setActiveTab('history')}
            className={`px-6 py-3 font-semibold transition-colors flex items-center gap-2 ${
              activeTab === 'history'
                ? 'bg-blue-600 text-white border-b-2 border-blue-400'
                : 'text-blue-300 hover:text-white hover:bg-blue-800/30'
            }`}
          >
            <History className="w-5 h-5" />
            Configuration History
          </button>
        </div>

        {/* Configure Port Tab */}
        {activeTab === 'configure' && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Configuration Form */}
            <div className="bg-slate-800/50 backdrop-blur rounded-lg p-6 border border-blue-700/50">
              <h2 className="text-2xl font-bold mb-6 flex items-center gap-2">
                <Settings className="w-6 h-6 text-blue-400" />
                Port Configuration
              </h2>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-semibold mb-2 text-blue-300">Device</label>
                  <select
                    value={device}
                    onChange={(e) => setDevice(e.target.value)}
                    className="w-full px-4 py-2 bg-slate-700 border border-blue-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {devices.map(d => (
                      <option key={d} value={d}>{d}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-semibold mb-2 text-blue-300">Interface</label>
                  <input
                    type="text"
                    value={port}
                    onChange={(e) => setPort(e.target.value)}
                    placeholder="Ethernet1/1"
                    className="w-full px-4 py-2 bg-slate-700 border border-blue-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold mb-2 text-blue-300">VLAN ID</label>
                  <input
                    type="text"
                    value={vlan}
                    onChange={(e) => setVlan(e.target.value)}
                    placeholder="100"
                    className="w-full px-4 py-2 bg-slate-700 border border-blue-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold mb-2 text-blue-300">Description</label>
                  <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="Server Port - Production VLAN"
                    className="w-full px-4 py-2 bg-slate-700 border border-blue-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <button
                  onClick={simulatePreCheck}
                  disabled={isChecking || !port}
                  className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed py-3 rounded-lg font-semibold transition-colors flex items-center justify-center gap-2"
                >
                  {isChecking ? (
                    <>
                      <Clock className="w-5 h-5 animate-spin" />
                      Running Pre-Checks...
                    </>
                  ) : (
                    <>
                      <Search className="w-5 h-5" />
                      Run Pre-Configuration Checks
                    </>
                  )}
                </button>
              </div>
            </div>

            {/* Pre-Check Results */}
            <div className="bg-slate-800/50 backdrop-blur rounded-lg p-6 border border-blue-700/50">
              <h2 className="text-2xl font-bold mb-6 flex items-center gap-2">
                <AlertCircle className="w-6 h-6 text-yellow-400" />
                Pre-Configuration Analysis
              </h2>

              {!checkResults ? (
                <div className="text-center py-12 text-blue-300">
                  <Search className="w-16 h-16 mx-auto mb-4 opacity-50" />
                  <p>Run pre-checks to analyze port configuration</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {/* Status Indicators */}
                  <div className="grid grid-cols-2 gap-3">
                    <div className="bg-green-900/30 border border-green-600 rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        <CheckCircle className="w-4 h-4 text-green-400" />
                        <span className="text-sm font-semibold">Port Exists</span>
                      </div>
                      <p className="text-xs text-green-300">Validated</p>
                    </div>
                    <div className="bg-blue-900/30 border border-blue-600 rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        <AlertCircle className="w-4 h-4 text-blue-400" />
                        <span className="text-sm font-semibold">Admin Status</span>
                      </div>
                      <p className="text-xs text-blue-300">{checkResults.adminStatus}</p>
                    </div>
                    <div className="bg-yellow-900/30 border border-yellow-600 rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        <AlertCircle className="w-4 h-4 text-yellow-400" />
                        <span className="text-sm font-semibold">Oper Status</span>
                      </div>
                      <p className="text-xs text-yellow-300">{checkResults.operStatus}</p>
                    </div>
                    <div className="bg-green-900/30 border border-green-600 rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        <CheckCircle className="w-4 h-4 text-green-400" />
                        <span className="text-sm font-semibold">MAC Addresses</span>
                      </div>
                      <p className="text-xs text-green-300">{checkResults.macAddresses.length} found</p>
                    </div>
                  </div>

                  {/* Current Configuration */}
                  <div className="bg-slate-700/50 rounded-lg p-4">
                    <h3 className="font-semibold mb-2 text-blue-300">Current Configuration</h3>
                    <div className="font-mono text-sm space-y-1">
                      <div>Description: {checkResults.currentConfig.description}</div>
                      <div>VLAN: {checkResults.currentConfig.vlan}</div>
                      <div>Mode: {checkResults.currentConfig.mode}</div>
                    </div>
                  </div>

                  {/* Recommendations */}
                  <div className="bg-blue-900/20 border border-blue-600 rounded-lg p-4">
                    <h3 className="font-semibold mb-2 text-blue-300">Analysis</h3>
                    <ul className="space-y-2 text-sm">
                      {checkResults.recommendations.map((rec, idx) => (
                        <li key={idx} className="flex items-start gap-2">
                          <AlertCircle className="w-4 h-4 text-blue-400 mt-0.5 flex-shrink-0" />
                          <span>{rec}</span>
                        </li>
                      ))}
                    </ul>
                  </div>

                  {/* Apply Button */}
                  <button
                    onClick={simulateApplyConfig}
                    disabled={isApplying}
                    className="w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-600 py-3 rounded-lg font-semibold transition-colors flex items-center justify-center gap-2"
                  >
                    {isApplying ? (
                      <>
                        <Clock className="w-5 h-5 animate-spin" />
                        Applying Configuration & Committing to Git...
                      </>
                    ) : (
                      <>
                        <Play className="w-5 h-5" />
                        Apply Configuration
                      </>
                    )}
                  </button>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Configuration History Tab */}
        {activeTab === 'history' && (
          <div className="bg-slate-800/50 backdrop-blur rounded-lg p-6 border border-blue-700/50">
            <h2 className="text-2xl font-bold mb-6 flex items-center gap-2">
              <GitBranch className="w-6 h-6 text-blue-400" />
              Configuration History & Version Control
            </h2>

            <div className="space-y-3">
              {configHistory.map(entry => (
                <div key={entry.id} className="bg-slate-700/50 rounded-lg p-4 border border-blue-600/30 hover:border-blue-500 transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <span className="font-mono text-sm bg-slate-600 px-2 py-1 rounded">{entry.commit}</span>
                        <span className={`px-2 py-1 rounded text-xs font-semibold ${
                          entry.status === 'success' ? 'bg-green-900/50 text-green-300' : 'bg-yellow-900/50 text-yellow-300'
                        }`}>
                          {entry.status === 'success' ? 'Applied' : 'Rolled Back'}
                        </span>
                      </div>
                      <p className="font-semibold mb-1">{entry.action}</p>
                      <p className="text-sm text-blue-300">
                        {entry.timestamp} • by {entry.user}
                      </p>
                    </div>
                    <button
                      onClick={() => handleRollback(entry.commit)}
                      className="bg-yellow-600 hover:bg-yellow-700 px-4 py-2 rounded-lg font-semibold transition-colors flex items-center gap-2"
                    >
                      <RotateCcw className="w-4 h-4" />
                      Rollback
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default NXOSAutomationPortal;
